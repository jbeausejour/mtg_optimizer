"""Update models

Revision ID: fa4d4900db83
Revises: 790252084c8a
Create Date: 2024-10-15 16:08:33.376061

"""
from sqlalchemy.dialects import sqlite
from alembic import op
import sqlalchemy as sa
from sqlalchemy.engine.reflection import Inspector
from alembic.context import get_bind

# revision identifiers, used by Alembic.
revision = 'fa4d4900db83'
down_revision = '790252084c8a'
branch_labels = None
depends_on = None

def upgrade():
    # Get the database connection
    bind = get_bind()
    inspector = Inspector.from_engine(bind)

    # Check and alter 'scan_result' first to remove foreign keys that reference other tables
    if 'scan_result' in inspector.get_table_names():
        with op.batch_alter_table('scan_result', schema=None) as batch_op:
            # Drop foreign key constraints related to 'marketplace_card' if they exist
            fk_constraints = inspector.get_foreign_keys('scan_result')
            for fk in fk_constraints:
                if fk['referred_table'] == 'marketplace_card':
                    batch_op.drop_constraint(fk['name'], type_='foreignkey')
            
            # Drop 'marketplace_card_id' if it exists
            if 'marketplace_card_id' in [col['name'] for col in inspector.get_columns('scan_result')]:
                batch_op.drop_column('marketplace_card_id')

            # Add new columns if needed
            if 'card_name' not in [col['name'] for col in inspector.get_columns('scan_result')]:
                batch_op.add_column(sa.Column('card_name', sa.String(length=255), nullable=False))
            if 'updated_at' not in [col['name'] for col in inspector.get_columns('scan_result')]:
                batch_op.add_column(sa.Column('updated_at', sa.DateTime(), nullable=False))

    # Check and drop the table only if it exists
    if 'optimization_result' in inspector.get_table_names():
        op.drop_table('optimization_result')

    if 'scryfall_card_data' in inspector.get_table_names():
        op.drop_table('scryfall_card_data')

    if 'marketplace_card' in inspector.get_table_names():
        op.drop_table('marketplace_card')

    if 'sets' in inspector.get_table_names():
        op.drop_table('sets')

    # Update 'user_buylist_card' table if it exists
    if 'user_buylist_card' in inspector.get_table_names():
        with op.batch_alter_table('user_buylist_card', schema=None) as batch_op:
            if 'language' in [col['name'] for col in inspector.get_columns('user_buylist_card')]:
                batch_op.drop_column('language')
            if 'edition' in [col['name'] for col in inspector.get_columns('user_buylist_card')]:
                batch_op.drop_column('edition')
            if 'quality' in [col['name'] for col in inspector.get_columns('user_buylist_card')]:
                batch_op.drop_column('quality')
            if 'version' in [col['name'] for col in inspector.get_columns('user_buylist_card')]:
                batch_op.drop_column('version')



def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('user_buylist_card', schema=None) as batch_op:
        batch_op.add_column(sa.Column('version', sa.VARCHAR(length=255), nullable=True))
        batch_op.add_column(sa.Column('quality', sa.VARCHAR(length=255), nullable=False))
        batch_op.add_column(sa.Column('edition', sa.VARCHAR(length=255), nullable=True))
        batch_op.add_column(sa.Column('language', sa.VARCHAR(length=255), nullable=False))

    with op.batch_alter_table('scan_result', schema=None) as batch_op:
        batch_op.add_column(sa.Column('marketplace_card_id', sa.INTEGER(), nullable=False))
        batch_op.create_foreign_key(None, 'marketplace_card', ['marketplace_card_id'], ['id'])
        batch_op.drop_column('updated_at')
        batch_op.drop_column('card_name')

    op.create_table('sets',
    sa.Column('id', sa.VARCHAR(length=36), nullable=False),
    sa.Column('code', sa.VARCHAR(length=10), nullable=False),
    sa.Column('tcgplayer_id', sa.INTEGER(), nullable=True),
    sa.Column('name', sa.VARCHAR(length=255), nullable=False),
    sa.Column('uri', sa.VARCHAR(length=255), nullable=True),
    sa.Column('scryfall_uri', sa.VARCHAR(length=255), nullable=True),
    sa.Column('search_uri', sa.VARCHAR(length=255), nullable=True),
    sa.Column('released_at', sa.DATE(), nullable=True),
    sa.Column('set_type', sa.VARCHAR(length=50), nullable=True),
    sa.Column('card_count', sa.INTEGER(), nullable=True),
    sa.Column('printed_size', sa.INTEGER(), nullable=True),
    sa.Column('digital', sa.BOOLEAN(), nullable=True),
    sa.Column('nonfoil_only', sa.BOOLEAN(), nullable=True),
    sa.Column('foil_only', sa.BOOLEAN(), nullable=True),
    sa.Column('icon_svg_uri', sa.VARCHAR(length=255), nullable=True),
    sa.Column('last_updated', sa.DATETIME(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('code')
    )
    op.create_table('marketplace_card',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('site', sa.VARCHAR(length=255), nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), nullable=False),
    sa.Column('edition', sa.VARCHAR(length=255), nullable=False),
    sa.Column('version', sa.VARCHAR(length=255), nullable=True),
    sa.Column('foil', sa.BOOLEAN(), nullable=False),
    sa.Column('quality', sa.VARCHAR(length=255), nullable=False),
    sa.Column('language', sa.VARCHAR(length=255), nullable=False),
    sa.Column('quantity', sa.INTEGER(), nullable=False),
    sa.Column('price', sa.FLOAT(), nullable=False),
    sa.Column('set_id', sa.VARCHAR(length=36), nullable=True),
    sa.Column('created_at', sa.DATETIME(), nullable=True),
    sa.Column('updated_at', sa.DATETIME(), nullable=True),
    sa.ForeignKeyConstraint(['set_id'], ['sets.id'], name='fk_card_set_id'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('scryfall_card_data',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('card_name', sa.VARCHAR(length=255), nullable=False),
    sa.Column('oracle_id', sa.VARCHAR(length=255), nullable=False),
    sa.Column('multiverse_ids', sa.VARCHAR(length=255), nullable=True),
    sa.Column('reserved', sa.BOOLEAN(), nullable=True),
    sa.Column('lang', sa.VARCHAR(length=10), nullable=True),
    sa.Column('set_code', sa.VARCHAR(length=10), nullable=True),
    sa.Column('set_name', sa.VARCHAR(length=255), nullable=True),
    sa.Column('collector_number', sa.VARCHAR(length=20), nullable=True),
    sa.Column('variation', sa.BOOLEAN(), nullable=True),
    sa.Column('promo', sa.BOOLEAN(), nullable=True),
    sa.Column('prices', sqlite.JSON(), nullable=True),
    sa.Column('purchase_uris', sqlite.JSON(), nullable=True),
    sa.Column('cardconduit_data', sqlite.JSON(), nullable=True),
    sa.Column('scan_timestamp', sa.DATETIME(), nullable=True),
    sa.Column('purchase_data', sqlite.JSON(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('optimization_result',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('card_names', sqlite.JSON(), nullable=True),
    sa.Column('results', sqlite.JSON(), nullable=True),
    sa.Column('timestamp', sa.DATETIME(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###
